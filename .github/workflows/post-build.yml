name: Post Build and Verify

on:
  workflow_run:
    workflows: ["Build and Verify"]
    types:
      - completed

jobs:
  post-build-and-verify-failure:
    runs-on: ubuntu-20.04
    if: >-
      ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Download artifact'
        uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip -d pr pr.zip

      - name: 'Remove label from PR'
        uses: actions/github-script@v3
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = fs.readFileSync('./pr/NR');
            github.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(issue_number),
              name: 'authorized-request'
            })

      - name: 'Prepare PR comment'
        run: |
          python3 scripts/prepare_pr_comment.py failure ${{ github.repository }}

      - name: 'Comment on PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = fs.readFileSync('./pr/NR');
            var comment = fs.readFileSync('./pr/comment', {encoding:'utf8', flag:'r'});
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(issue_number),
              body: comment
            });

      - name: 'Add label to PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = fs.readFileSync('./pr/NR');
            var vendor_label = fs.readFileSync('./pr/vendor');
            var chart_name = fs.readFileSync('./pr/chart');
            if (vendor_label.toString() !== "" && chart_name.toString() !== "") {
              github.issues.addLabels({
                issue_number: Number(issue_number),
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['authorized-request']
            })};

  post-build-and-verify-success:
    runs-on: ubuntu-20.04
    if: >-
      ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Download artifact'
        uses: actions/github-script@v3
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip -d pr pr.zip

      - name: 'Remove label from PR'
        uses: actions/github-script@v3
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = fs.readFileSync('./pr/NR');
            github.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(issue_number),
              name: 'authorized-request'
            })

      - name: 'Prepare PR comment'
        run: |
          python3 scripts/prepare_pr_comment.py success ${{ github.repository }}

      - name: 'Comment on PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = fs.readFileSync('./pr/NR');
            var comment = fs.readFileSync('./pr/comment', {encoding:'utf8', flag:'r'});
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(issue_number),
              body: comment
            });

      - name: 'Add label to PR'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = fs.readFileSync('./pr/NR');
            var vendor_label = fs.readFileSync('./pr/vendor');
            var chart_name = fs.readFileSync('./pr/chart');
            if (vendor_label.toString() !== "" && chart_name.toString() !== "") {
              github.issues.addLabels({
                issue_number: Number(issue_number),
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['authorized-request']
            })};
