# Code generated by solo-kit. DO NOT EDIT.

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    gloo: settings
  name: settings.gloo.solo.io
spec:
  group: gloo.solo.io
  names:
    kind: Settings
    listKind: SettingsList
    plural: settings
    shortNames:
    - st
  preserveUnknownFields: false
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: Represents global settings for all the Gloo components.
          properties:
            consul:
              description: Options to configure Gloo's integration with [HashiCorp
                Consul](https://www.consul.io/).
              properties:
                address:
                  description: 'Deprecated: prefer http_address. The address of the
                    Consul HTTP server. Used by service discovery and key-value storage
                    (if-enabled). Defaults to the value of the standard CONSUL_HTTP_ADDR
                    env if set, otherwise to 127.0.0.1:8500.'
                  type: string
                caFile:
                  description: caFile is the optional path to the CA certificate used
                    for Consul communication, defaults to the system bundle if not
                    specified.
                  type: string
                caPath:
                  description: caPath is the optional path to a directory of CA certificates
                    to use for Consul communication, defaults to the system bundle
                    if not specified.
                  type: string
                certFile:
                  description: CertFile is the optional path to the certificate for
                    Consul communication. If this is set then you need to also set
                    KeyFile.
                  type: string
                datacenter:
                  description: Datacenter to use. If not provided, the default agent
                    datacenter is used.
                  type: string
                dnsAddress:
                  description: The address of the DNS server used to resolve hostnames
                    in the Consul service address. Used by service discovery (required
                    when Consul service instances are stored as DNS names). Defaults
                    to 127.0.0.1:8600. (the default Consul DNS server)
                  type: string
                dnsPollingInterval:
                  description: The polling interval for the DNS server. If there is
                    a Consul service address with a hostname instead of an IP, Gloo
                    will resolve the hostname with the configured frequency to update
                    endpoints with any changes to DNS resolution. Defaults to 5s.
                  type: string
                httpAddress:
                  description: The address of the Consul HTTP server. Used by service
                    discovery and key-value storage (if-enabled). Defaults to the
                    value of the standard CONSUL_HTTP_ADDR env if set, otherwise to
                    127.0.0.1:8500.
                  type: string
                insecureSkipVerify:
                  description: InsecureSkipVerify if set to true will disable TLS
                    host verification.
                  nullable: true
                  type: boolean
                keyFile:
                  description: KeyFile is the optional path to the private key for
                    Consul communication. If this is set then you need to also set
                    CertFile.
                  type: string
                password:
                  description: Password to use for HTTP Basic Authentication
                  type: string
                serviceDiscovery:
                  description: Enable Service Discovery via Consul with this field
                    set to empty struct `{}` to enable with defaults
                  properties:
                    dataCenters:
                      description: Use this parameter to restrict the data centers
                        that will be considered when discovering and routing to services.
                        If not provided, Gloo will use all available data centers.
                      items:
                        type: string
                      type: array
                  type: object
                token:
                  description: Token is used to provide a per-request ACL token which
                    overrides the agent's default token.
                  type: string
                username:
                  description: Username to use for HTTP Basic Authentication
                  type: string
                waitTime:
                  description: WaitTime limits how long a watches for Consul resources
                    will block. If not provided, the agent default values will be
                    used.
                  type: string
              type: object
            consulDiscovery:
              properties:
                rootCa:
                  description: The reference for the root CA resource to be used by
                    discovered consul TLS upstreams.
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                splitTlsServices:
                  description: If true, then create two upstreams when the tlsTagName
                    is found on a consul service, one with tls and one without. This
                    requires a consul service's serviceInstances be individually tagged;
                    servicesInstances with the tlsTagName tag are directed to the
                    TLS upstream, while those without the tlsTagName tag are sorted
                    into the non-TLS upstream.
                  type: boolean
                tlsTagName:
                  description: The tag that gloo should use to make TLS upstreams
                    from consul services, and to partition consul serviceInstances
                    between TLS/non-TLS upstreams. Defaults to 'glooUseTls'
                  type: string
                useTlsTagging:
                  description: If true, then gloo will add TLS to upstreams created
                    for any consul service that has the tag specified by tlsTagName.
                    If splitTlsServices is true, then this tag is also used to identify
                    serviceInstances that should be tied to the TLS upstream. Requires
                    rootCa to be set if true.
                  type: boolean
              type: object
            consulKvArtifactSource:
              properties:
                rootKey:
                  description: all keys stored in Consul will begin with this prefix
                    this can be used to run multiple instances of Gloo against the
                    same Consul cluster defaults to `gloo`
                  type: string
              type: object
            consulKvSource:
              properties:
                rootKey:
                  description: all keys stored in Consul will begin with this prefix
                    this can be used to run multiple instances of Gloo against the
                    same Consul cluster defaults to `gloo`
                  type: string
              type: object
            devMode:
              description: Enable serving debug data on port 9090
              type: boolean
            directoryArtifactSource:
              properties:
                directory:
                  type: string
              type: object
            directoryConfigSource:
              properties:
                directory:
                  type: string
              type: object
            directorySecretSource:
              properties:
                directory:
                  type: string
              type: object
            discovery:
              description: Options for configuring Gloo's Discovery service
              properties:
                fdsMode:
                  enum:
                  - BLACKLIST
                  - WHITELIST
                  - DISABLED
                  type: string
              type: object
            discoveryNamespace:
              description: This is the namespace to which Gloo controllers will write
                their own resources, e.g. discovered Upstreams or default Gateways.
                If empty, this will default to "gloo-system".
              type: string
            extauth:
              description: 'Enterprise-only: External auth related settings'
              properties:
                clearRouteCache:
                  description: 'Clears route cache in order to allow the external
                    authorization service to correctly affect routing decisions. Filter
                    clears all cached routes when:'
                  type: boolean
                extauthzServerRef:
                  description: The upstream to ask about auth decisions
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                failureModeAllow:
                  description: In case of a failure or timeout querying the auth server,
                    normally a request is denied. if this is set to true, the request
                    will be allowed.
                  type: boolean
                httpService:
                  description: If this is set, communication to the upstream will
                    be via HTTP and not GRPC.
                  properties:
                    pathPrefix:
                      description: Sets a prefix to the value of authorization request
                        header *Path*.
                      type: string
                    request:
                      properties:
                        allowedHeaders:
                          description: 'These headers will be copied from the incoming
                            request to the request going to the auth server. Note
                            that in addition to the user''s supplied matchers:'
                          items:
                            type: string
                          type: array
                        headersToAdd:
                          additionalProperties:
                            type: string
                          description: These headers that will be included to the
                            request to authorization service. Note that client request
                            of the same key will be overridden.
                          type: object
                      type: object
                    response:
                      properties:
                        allowedClientHeaders:
                          description: When this. is set, authorization response headers
                            that will be added to the client's response when auth
                            request is denied. Note that when this list is *not* set,
                            all the authorization response headers, except *Authority
                            (Host)* will be in the response to the client. When a
                            header is included in this list, *Path*, *Status*, *Content-Length*,
                            *WWW-Authenticate* and *Location* are automatically added.
                          items:
                            type: string
                          type: array
                        allowedUpstreamHeaders:
                          description: When this is set, authorization response headers
                            that have a will be added to the original client request
                            and sent to the upstream. Note that coexistent headers
                            will be overridden.
                          items:
                            type: string
                          type: array
                      type: object
                  type: object
                requestBody:
                  description: Set this if you also want to send the body of the request,
                    and not just the headers.
                  properties:
                    allowPartialMessage:
                      description: When this field is true, Envoy will buffer the
                        message until *max_request_bytes* is reached. The authorization
                        request will be dispatched and no 413 HTTP error will be returned
                        by the filter.
                      type: boolean
                    maxRequestBytes:
                      description: Sets the maximum size of a message body that the
                        filter will hold in memory. Envoy will return *HTTP 413* and
                        will *not* initiate the authorization process when buffer
                        reaches the number set in this field. Note that this setting
                        will have precedence over failure_mode_allow. Defaults to
                        4KB.
                      format: int32
                      type: integer
                    packAsBytes:
                      description: When this field is true, Envoy will send the body
                        sent to the external authorization service with raw bytes.
                      type: boolean
                  type: object
                requestTimeout:
                  description: Timeout for the ext auth service to respond. Defaults
                    to 200ms
                  type: string
                statPrefix:
                  description: Optional additional prefix to use when emitting statistics.
                    This allows to distinguish emitted statistics between configured
                    ext_authz filters in an HTTP filter chain.
                  type: string
                statusOnError:
                  description: 'Sets the HTTP status that is returned to the client
                    when there is a network error between the filter and the authorization
                    server. The default status is HTTP 403 Forbidden. If set, this
                    must be one of the following: - 100 - 200 201 202 203 204 205
                    206 207 208 226 - 300 301 302 303 304 305 307 308 - 400 401 402
                    403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 421
                    422 423 424 426 428 429 431 - 500 501 502 503 504 505 506 507
                    508 510 511'
                  format: int32
                  type: integer
                transportApiVersion:
                  description: Determines the API version for the `ext_authz` transport
                    protocol that will be used by Envoy to communicate with the auth
                    server. Defaults to `V2`. For more info, see the `transport_api_version`
                    field [here](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto#extensions-filters-http-ext-authz-v3-extauthz).
                  enum:
                  - V3
                  type: string
                userIdHeader:
                  description: If the auth server trusted id of the user, it will
                    be set in this header. Specifically this means that this header
                    will be sanitized form the incoming request.
                  type: string
              type: object
            extensions:
              description: Extensions will be passed along from Listeners, Gateways,
                VirtualServices, Routes, and Route tables to the underlying Proxy,
                making them useful for controllers, validation tools, etc. which interact
                with kubernetes yaml.
              properties:
                configs:
                  additionalProperties:
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  type: object
              type: object
            gateway:
              description: Options for configuring `gateway`, the Gateway Gloo controller,
                which enables the VirtualService/Gateway API in Gloo
              properties:
                alwaysSortRouteTableRoutes:
                  description: Deprecated. This setting is ignored. Maintained for
                    backwards compatibility with settings exposed on 1.2.x branch
                    of Gloo.
                  type: boolean
                compressedProxySpec:
                  description: If set, compresses proxy space. This can help make
                    the Proxy CRD smaller to fit in etcd. This is an advanced option.
                    Use with care.
                  type: boolean
                readGatewaysFromAllNamespaces:
                  description: When true, the Gateway controller will consume Gateway
                    custom resources from all watch namespaces, rather than just the
                    Gateway CRDs in its own namespace.
                  type: boolean
                validation:
                  description: If provided, the Gateway will perform [Dynamic Admission
                    Control](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)
                    of Gateways, Virtual Services, and Route Tables when running in
                    Kubernetes.
                  properties:
                    allowWarnings:
                      description: Accept resources if validation produced a warning
                        (defaults to true). By setting to false, this means that validation
                        will start rejecting resources that would result in warnings,
                        rather than just those that would result in errors.
                      nullable: true
                      type: boolean
                    alwaysAccept:
                      description: Always accept resources even if validation produced
                        an error. Validation will still log the error and increment
                        the validation.gateway.solo.io/resources_rejected stat. Currently
                        defaults to true - must be set to `false` to prevent writing
                        invalid resources to storage.
                      nullable: true
                      type: boolean
                    disableTransformationValidation:
                      description: By default gloo will attempt to validate transformations
                        by calling out to a local envoy binary in `validate` mode.
                        Calling this local envoy binary can become slow when done
                        many times during a single validation. Setting this to true
                        will stop gloo from calling out to envoy to validate the transformations,
                        which may speed up the validation time considerably, but may
                        also cause the transformation config to fail after being sent
                        to envoy. When disabling this, ensure that your transformations
                        are valid prior to applying them.
                      nullable: true
                      type: boolean
                    ignoreGlooValidationFailure:
                      description: When Gateway cannot communicate with Gloo (e.g.
                        Gloo is offline) resources will be rejected by default. Enable
                        the `ignoreGlooValidationFailure` to prevent the Validation
                        server from rejecting resources due to network errors.
                      type: boolean
                    proxyValidationServerAddr:
                      description: Address of the `gloo` proxy validation grpc server.
                        Defaults to `gloo:9988`. This field is required in order to
                        enable fine-grained admission control.
                      type: string
                    validationServerGrpcMaxSize:
                      description: By default, gRPC validation messages between gateway
                        and gloo pods have a max message size of 4 MB. Setting this
                        value sets the gRPC max message size in bytes for the gloo
                        validation server. This should only be changed if necessary.
                        If not included, the gRPC max message size will be the default
                        of 4 MB.
                      properties:
                        value:
                          description: The int64 value.
                          format: int64
                          type: integer
                      type: object
                    validationWebhookTlsCert:
                      description: Path to TLS Certificate for Kubernetes Validating
                        webhook. Defaults to `/etc/gateway/validation-certs/tls.crt`.
                      type: string
                    validationWebhookTlsKey:
                      description: Path to TLS Private Key for Kubernetes Validating
                        webhook. Defaults to `/etc/gateway/validation-certs/tls.key`.
                      type: string
                    warnRouteShortCircuiting:
                      description: 'Write a warning to route resources if validation
                        produced a route ordering warning (defaults to false). By
                        setting to true, this means that Gloo will start assigning
                        warnings to resources that would result in route short-circuiting
                        within a virtual host, for example: - prefix routes that make
                        later routes unreachable - regex routes that make later routes
                        unreachable - duplicate matchers'
                      nullable: true
                      type: boolean
                  type: object
                validationServerAddr:
                  description: Address of the `gloo` config validation server. Defaults
                    to `gloo:9988`.
                  type: string
              type: object
            gloo:
              description: Options for configuring `gloo`, the core Gloo controller,
                which serves dynamic configuration to Envoy
              properties:
                awsOptions:
                  properties:
                    enableCredentialsDiscovey:
                      description: Enable credential discovery via IAM; when this
                        is set, there's no need provide a secret on the upstream when
                        running on AWS environment.
                      type: boolean
                    serviceAccountCredentials:
                      description: 'Use projected service account token, and role
                        arn to create temporary credentials with which to authenticate
                        lambda requests. This functionality is meant to work along
                        side EKS service account to IAM binding functionality as outlined
                        here: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html'
                      properties:
                        cluster:
                          description: The name of the envoy cluster which represents
                            the desired aws sts endpoint
                          type: string
                        timeout:
                          description: timeout for the request
                          type: string
                        uri:
                          description: The full uri of the aws sts endpoint
                          type: string
                      type: object
                  type: object
                circuitBreakers:
                  description: Default circuit breaker configuration to use for upstream
                    requests, when not provided by specific upstream.
                  properties:
                    maxConnections:
                      maximum: 4294967295
                      minimum: 0
                      nullable: true
                      type: integer
                    maxPendingRequests:
                      maximum: 4294967295
                      minimum: 0
                      nullable: true
                      type: integer
                    maxRequests:
                      maximum: 4294967295
                      minimum: 0
                      nullable: true
                      type: integer
                    maxRetries:
                      maximum: 4294967295
                      minimum: 0
                      nullable: true
                      type: integer
                  type: object
                disableGrpcWeb:
                  description: Default policy for grpc-web. set to true if you do
                    not wish grpc-web to be automatically enabled. set to false if
                    you wish grpc-web enabled unless disabled on the listener level.
                    If not specified, defaults to `false`.
                  nullable: true
                  type: boolean
                disableKubernetesDestinations:
                  description: Gloo allows you to directly reference a Kubernetes
                    service as a routing destination. To enable this feature, Gloo
                    scans the cluster for Kubernetes services and creates a special
                    type of in-memory Upstream to represent them. If the cluster contains
                    a lot of services and you do not restrict the namespaces Gloo
                    is watching, this can result in significant overhead. If you do
                    not plan on using this feature, you can use this flag to turn
                    it off.
                  type: boolean
                disableProxyGarbageCollection:
                  description: Set this option to determine the state of the envoy
                    configuration when a virtual service is deleted, resulting in
                    a proxy with no configured routes. set to true if you wish to
                    keep envoy serving the routes from the latest valid configuration.
                    set to false if you wish to reset the envoy configuration to a
                    clean slate with no routes. If not specified, defaults to `false`.
                  nullable: true
                  type: boolean
                enableRestEds:
                  description: Whether or not to use rest xds for all EDS by default.
                    Rest XDS, as opposed to grpc, uses http polling rather than streaming
                  nullable: true
                  type: boolean
                endpointsWarmingTimeout:
                  description: Timeout to get initial snapshot of resources. If set
                    to zero, Gloo will not wait for initial snapshot - if nonzero
                    and gloo could not fetch it's initial snapshot before the timeout
                    reached, gloo will panic. If unset, Gloo defaults to 5 minutes.
                  type: string
                failoverUpstreamDnsPollingInterval:
                  description: The polling interval for the DNS server if upstream
                    failover is configured. If there is a failover upstream address
                    with a hostname instead of an IP, Gloo will resolve the hostname
                    with the configured frequency to update endpoints with any changes
                    to DNS resolution. Defaults to 10s.
                  type: string
                invalidConfigPolicy:
                  description: set these options to fine-tune the way Gloo handles
                    invalid user configuration
                  properties:
                    invalidRouteResponseBody:
                      description: replaced routes reply to clients with this response
                        body. default is 'Gloo Gateway has invalid configuration.
                        Administrators should run `glooctl check` to find and fix
                        config errors.'
                      type: string
                    invalidRouteResponseCode:
                      description: replaced routes reply to clients with this response
                        code. default is 404.
                      format: int32
                      type: integer
                    replaceInvalidRoutes:
                      description: if set to `true`, Gloo removes any routes from
                        the provided configuration which point to a missing destination.
                        Routes that are removed in this way will instead return a
                        configurable direct response to clients. When routes are replaced,
                        Gloo will configure Envoy with a special listener which serves
                        direct responses.
                      type: boolean
                  type: object
                regexMaxProgramSize:
                  description: Set this option to specify the default max program
                    size for regexes. If not specified, defaults to 100.
                  maximum: 4294967295
                  minimum: 0
                  nullable: true
                  type: integer
                restXdsBindAddr:
                  description: Where the `gloo` REST xDS server should bind. Defaults
                    to `0.0.0.0:9976`
                  type: string
                validationBindAddr:
                  description: Where the `gloo` validation server should bind. Defaults
                    to `0.0.0.0:9988`
                  type: string
                xdsBindAddr:
                  description: Where the `gloo` xDS server should bind. Defaults to
                    `0.0.0.0:9977`
                  type: string
              type: object
            knative:
              description: Configuration options for the Clusteringress Controller
                (for Knative).
              properties:
                clusterIngressProxyAddress:
                  description: Address of the clusteringress proxy. If empty, it will
                    default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local.
                    Use if running Knative Version 0.7.X or less
                  type: string
                knativeExternalProxyAddress:
                  description: Address of the externally-facing knative proxy. If
                    empty, it will default to knative-external-proxy.$POD_NAMESPACE.svc.cluster.local.
                    Use if running Knative Version 0.8.X or higher
                  type: string
                knativeInternalProxyAddress:
                  description: Address of the internally-facing knative proxy. If
                    empty, it will default to knative-internal-proxy.$POD_NAMESPACE.svc.cluster.local.
                    Use if running Knative Version 0.8.X or higher
                  type: string
              type: object
            kubernetes:
              description: Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
              properties:
                rateLimits:
                  description: Rate limits for the kubernetes clients
                  properties:
                    QPS:
                      description: The maximum queries-per-second Gloo can make to
                        the Kubernetes API Server.
                      type: number
                    burst:
                      description: Maximum burst for throttle. When a steady state
                        of QPS requests per second, this is an additional number of
                        allowed, to allow for short bursts.
                      format: int32
                      type: integer
                  type: object
              type: object
            kubernetesArtifactSource:
              type: object
            kubernetesConfigSource:
              type: object
            kubernetesSecretSource:
              type: object
            linkerd:
              description: Enable automatic linkerd upstream header addition for easier
                routing to linkerd services
              type: boolean
            namedExtauth:
              additionalProperties:
                properties:
                  clearRouteCache:
                    description: 'Clears route cache in order to allow the external
                      authorization service to correctly affect routing decisions.
                      Filter clears all cached routes when:'
                    type: boolean
                  extauthzServerRef:
                    description: The upstream to ask about auth decisions
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    type: object
                  failureModeAllow:
                    description: In case of a failure or timeout querying the auth
                      server, normally a request is denied. if this is set to true,
                      the request will be allowed.
                    type: boolean
                  httpService:
                    description: If this is set, communication to the upstream will
                      be via HTTP and not GRPC.
                    properties:
                      pathPrefix:
                        description: Sets a prefix to the value of authorization request
                          header *Path*.
                        type: string
                      request:
                        properties:
                          allowedHeaders:
                            description: 'These headers will be copied from the incoming
                              request to the request going to the auth server. Note
                              that in addition to the user''s supplied matchers:'
                            items:
                              type: string
                            type: array
                          headersToAdd:
                            additionalProperties:
                              type: string
                            description: These headers that will be included to the
                              request to authorization service. Note that client request
                              of the same key will be overridden.
                            type: object
                        type: object
                      response:
                        properties:
                          allowedClientHeaders:
                            description: When this. is set, authorization response
                              headers that will be added to the client's response
                              when auth request is denied. Note that when this list
                              is *not* set, all the authorization response headers,
                              except *Authority (Host)* will be in the response to
                              the client. When a header is included in this list,
                              *Path*, *Status*, *Content-Length*, *WWW-Authenticate*
                              and *Location* are automatically added.
                            items:
                              type: string
                            type: array
                          allowedUpstreamHeaders:
                            description: When this is set, authorization response
                              headers that have a will be added to the original client
                              request and sent to the upstream. Note that coexistent
                              headers will be overridden.
                            items:
                              type: string
                            type: array
                        type: object
                    type: object
                  requestBody:
                    description: Set this if you also want to send the body of the
                      request, and not just the headers.
                    properties:
                      allowPartialMessage:
                        description: When this field is true, Envoy will buffer the
                          message until *max_request_bytes* is reached. The authorization
                          request will be dispatched and no 413 HTTP error will be
                          returned by the filter.
                        type: boolean
                      maxRequestBytes:
                        description: Sets the maximum size of a message body that
                          the filter will hold in memory. Envoy will return *HTTP
                          413* and will *not* initiate the authorization process when
                          buffer reaches the number set in this field. Note that this
                          setting will have precedence over failure_mode_allow. Defaults
                          to 4KB.
                        format: int32
                        type: integer
                      packAsBytes:
                        description: When this field is true, Envoy will send the
                          body sent to the external authorization service with raw
                          bytes.
                        type: boolean
                    type: object
                  requestTimeout:
                    description: Timeout for the ext auth service to respond. Defaults
                      to 200ms
                    type: string
                  statPrefix:
                    description: Optional additional prefix to use when emitting statistics.
                      This allows to distinguish emitted statistics between configured
                      ext_authz filters in an HTTP filter chain.
                    type: string
                  statusOnError:
                    description: 'Sets the HTTP status that is returned to the client
                      when there is a network error between the filter and the authorization
                      server. The default status is HTTP 403 Forbidden. If set, this
                      must be one of the following: - 100 - 200 201 202 203 204 205
                      206 207 208 226 - 300 301 302 303 304 305 307 308 - 400 401
                      402 403 404 405 406 407 408 409 410 411 412 413 414 415 416
                      417 421 422 423 424 426 428 429 431 - 500 501 502 503 504 505
                      506 507 508 510 511'
                    format: int32
                    type: integer
                  transportApiVersion:
                    description: Determines the API version for the `ext_authz` transport
                      protocol that will be used by Envoy to communicate with the
                      auth server. Defaults to `V2`. For more info, see the `transport_api_version`
                      field [here](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto#extensions-filters-http-ext-authz-v3-extauthz).
                    enum:
                    - V3
                    type: string
                  userIdHeader:
                    description: If the auth server trusted id of the user, it will
                      be set in this header. Specifically this means that this header
                      will be sanitized form the incoming request.
                    type: string
                type: object
              description: 'Enterprise-only: External auth related settings for additional
                auth servers This should only be used in the case where separate servers
                are needed to authorize separate routes. With multiple auth servers
                configured in Settings, multiple filters will be configured on the
                filter chain, but only 1 will be executed on a route. The name of
                the auth server (ie the key in the map) will be used to apply the
                configuration on the route. If an auth server name is not supplied
                on a route, the default auth server will be applied.'
              type: object
            observabilityOptions:
              description: Provides settings related to the observability deployment
                (enterprise only)
              properties:
                grafanaIntegration:
                  description: Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
                  properties:
                    defaultDashboardFolderId:
                      description: '(UInt32Value) Grafana allows dashboards to be
                        added to specific folders by specifying that folder''s ID
                        If unset, automatic upstream dashboards are generated in the
                        general folder (folderId: 0). If set, the observability deployment
                        will try to create/move all upstreams without their own folderId
                        to the folder specified here, after verifying that a folder
                        with such an ID exists. Be aware that grafana requires a folders
                        ID, which should not be confused with the similarly-named
                        and more easily accessible folder UID value. If individual
                        upstream dashboards need to be placed specific granafa folders,
                        they can be given their own folder IDs by annotating the upstreams.
                        The annotation key must be ''observability.solo.io/dashboard_folder_id''
                        and the value must be the folder ID. Folder IDs can be retrieved
                        from grafana with a pair of terminal commands: 1. Port forward
                        the grafana deployment to surface its API: kubectl -n gloo-system
                        port-forward deployment/glooe-grafana 3000 2. Request all
                        folder data (after admin:admin is replaced with the correct
                        credentials): curl http://admin:admin@localhost:3000/api/folders'
                      maximum: 4294967295
                      minimum: 0
                      nullable: true
                      type: integer
                  type: object
              type: object
            ratelimit:
              description: 'Enterprise-only: Partial config for GlooE''s rate-limiting
                service, based on Envoy''s rate-limit service; supports Envoy''s rate-limit
                service API. (reference here: https://github.com/lyft/ratelimit#configuration)
                Configure rate-limit *descriptors* here, which define the limits for
                requests based on their descriptors. Configure rate-limits (composed
                of *actions*, which define how request characteristics get translated
                into descriptors) on the VirtualHost or its routes'
              properties:
                descriptors:
                  items:
                    description: A descriptor is a list of key/value pairs that the
                      rate limit server uses to select the correct rate limit to use
                      when limiting. Descriptors are case-sensitive.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  type: array
                setDescriptors:
                  items:
                    description: A setDescriptor is a list of key/value pairs that
                      the rate limit server uses to select the correct rate limit
                      to use when limiting with the set style. Descriptors are case-sensitive.
                    properties:
                      alwaysApply:
                        description: Typically, rule priority is signalled by rule
                          ordering, as the first rule match for the descriptor tuple
                          generated by the rate limit actions is used.
                        type: boolean
                      rateLimit:
                        description: Rate limit rule for the descriptor.
                        properties:
                          requestsPerUnit:
                            format: int32
                            type: integer
                          unit:
                            enum:
                            - UNKNOWN
                            - SECOND
                            - MINUTE
                            - HOUR
                            - DAY
                            type: string
                        type: object
                      simpleDescriptors:
                        description: Simple descriptor key/value pairs.
                        items:
                          description: A simpleDescriptor is a list of key/value pairs
                            that the rate limit server uses to select the correct
                            rate limit to use when limiting with the set style. Descriptors
                            are case-sensitive.
                          properties:
                            key:
                              description: The key of the descriptor. This field is
                                required.
                              type: string
                            value:
                              description: Optional value for the descriptor. If omitted,
                                the server will create a rate limit for each value
                                that is provided for this descriptor in rate limit
                                requests.
                              type: string
                          type: object
                        type: array
                    type: object
                  type: array
              type: object
            ratelimitServer:
              description: 'Enterprise-only: Settings for the rate limiting server
                itself'
              properties:
                denyOnFail:
                  type: boolean
                rateLimitBeforeAuth:
                  description: 'Set this is set to true if you would like to rate
                    limit traffic before applying external auth to it. *Note*: When
                    this is true, you will lose some features like being able to rate
                    limit a request based on its auth state'
                  type: boolean
                ratelimitServerRef:
                  properties:
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                requestTimeout:
                  type: string
              type: object
            rbac:
              description: 'Enterprise-only: Settings for RBAC across all Gloo resources
                (VirtualServices, Routes, etc.)'
              properties:
                requireRbac:
                  description: Require RBAC for all virtual hosts. A vhost without
                    an RBAC policy set will fallback to a deny-all policy.
                  type: boolean
              type: object
            refreshRate:
              description: How frequently to resync watches, etc
              type: string
            status:
              description: Status indicates the validation status of this resource.
                Status is read-only by clients, and set by gloo during validation
              type: object
              x-kubernetes-preserve-unknown-fields: true
            upstreamOptions:
              description: Default configuration to use for upstreams, when not provided
                by specific upstream When these properties are defined on an upstream,
                this configuration will be ignored
              properties:
                sslParameters:
                  description: Default ssl parameter configuration to use for upstreams
                  properties:
                    cipherSuites:
                      items:
                        type: string
                      type: array
                    ecdhCurves:
                      items:
                        type: string
                      type: array
                    maximumProtocolVersion:
                      enum:
                      - TLS_AUTO
                      - TLSv1_0
                      - TLSv1_1
                      - TLSv1_2
                      - TLSv1_3
                      type: string
                    minimumProtocolVersion:
                      enum:
                      - TLS_AUTO
                      - TLSv1_0
                      - TLSv1_1
                      - TLSv1_2
                      - TLSv1_3
                      type: string
                  type: object
              type: object
            vaultSecretSource:
              properties:
                address:
                  description: address is the address of the Vault server. This should
                    be a complete URL such as http://solo.io
                  type: string
                caCert:
                  description: caCert is the path to a PEM-encoded CA cert file to
                    use to verify the Vault server SSL certificate.
                  type: string
                caPath:
                  description: caPath is the path to a directory of PEM-encoded CA
                    cert files to verify the Vault server SSL certificate.
                  type: string
                clientCert:
                  description: clientCert is the path to the certificate for Vault
                    communication
                  type: string
                clientKey:
                  description: clientKey is the path to the private key for Vault
                    communication
                  type: string
                insecure:
                  description: Insecure enables or disables SSL verification
                  nullable: true
                  type: boolean
                rootKey:
                  description: all keys stored in Vault will begin with this Vault
                    this can be used to run multiple instances of Gloo against the
                    same Consul cluster defaults to `gloo`
                  type: string
                tlsServerName:
                  description: tlsServerName, if set, is used to set the SNI host
                    when connecting via TLS.
                  type: string
                token:
                  description: the Token used to authenticate to Vault
                  type: string
              type: object
            watchNamespaces:
              description: Use this setting to restrict the namespaces that Gloo controllers
                take into consideration when watching for resources.In a usual production
                scenario, RBAC policies will limit the namespaces that Gloo has access
                to. If `watch_namespaces` contains namespaces outside of this whitelist,
                Gloo will fail to start.
              items:
                type: string
              type: array
          type: object
        status:
          description: Status indicates the validation status of this resource. Status
            is read-only by clients, and set by gloo during validation
          type: object
          x-kubernetes-preserve-unknown-fields: true
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
