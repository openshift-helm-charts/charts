{{- define "settings.settingsSpec"}}
{{ if .Values.settings.create }}

apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  labels:
    app: gloo
    gloo: settings
  name: default
  namespace: {{ .Release.Namespace }}
spec:
  gloo:
{{- if .Values.global.glooMtls.enabled }}
    xdsBindAddr: "127.0.0.1:9999"
    restXdsBindAddr: "127.0.0.1:9998"
{{- else }}
    xdsBindAddr: "0.0.0.0:{{ .Values.gloo.deployment.xdsPort }}"
    restXdsBindAddr: "0.0.0.0:{{ .Values.gloo.deployment.restXdsPort }}"
{{- end }}
    enableRestEds: {{ .Values.settings.enableRestEds | default false }}
{{- /* .Values.settings.replaceInvalidRoutes for backwards compatibility */}}
{{- if or (.Values.settings.invalidConfigPolicy) (.Values.settings.replaceInvalidRoutes) }}
    invalidConfigPolicy:
    {{- if .Values.settings.replaceInvalidRoutes }}
      replaceInvalidRoutes: {{ .Values.settings.replaceInvalidRoutes }}
    {{- end }}
{{ toYaml .Values.settings.invalidConfigPolicy | indent 6}}
{{- end }}
    disableKubernetesDestinations: {{ .Values.settings.disableKubernetesDestinations | default false }}
    disableProxyGarbageCollection: {{ .Values.settings.disableProxyGarbageCollection | default false }}
{{- if .Values.settings.regexMaxProgramSize }}
    regexMaxProgramSize: {{ .Values.settings.regexMaxProgramSize }}
{{- end }}
{{- if .Values.settings.aws.enableServiceAccountCredentials }}
    awsOptions:
      serviceAccountCredentials:
        cluster: aws_sts_cluster
{{- if not .Values.settings.aws.stsCredentialsRegion }}
        uri: sts.amazonaws.com
{{- else }}
        uri: sts.{{ .Values.settings.aws.stsCredentialsRegion }}.amazonaws.com
{{- end }}
{{- else if .Values.settings.aws.enableCredentialsDiscovery }}
    awsOptions:
      enableCredentialsDiscovey: true
{{- end }}

  {{- if .Values.settings.integrations.consul }}
  consul:
  {{- toYaml .Values.settings.integrations.consul | nindent 4 }}
  {{- end }}
  {{- if .Values.settings.integrations.consulUpstreamDiscovery }}
  consulUpstreamDiscovery:
  {{- toYaml .Values.settings.integrations.consulUpstreamDiscovery | nindent 4 }}
  {{- end }}

{{- if .Values.settings.writeNamespace }}
  discoveryNamespace: {{ .Values.settings.writeNamespace }}
{{- else }}
  discoveryNamespace: {{ .Release.Namespace }}
{{- end }}
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s
{{- if .Values.settings.linkerd }}
  linkerd: true
{{- end }}
{{- if .Values.settings.integrations.knative.enabled }}
  knative:
{{- if (semverCompare "< 0.8.0" .Values.settings.integrations.knative.version ) }}
    clusterIngressProxyAddress: "clusteringress-proxy.{{ .Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}"
{{- else }}
    knativeExternalProxyAddress: "knative-external-proxy.{{ .Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}"
    knativeInternalProxyAddress: "knative-internal-proxy.{{ .Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}"
{{- end }}
{{- end }}

  gateway:
    readGatewaysFromAllNamespaces: {{ .Values.gateway.readGatewaysFromAllNamespaces }}
{{- if .Values.gateway.compressedProxySpec}}
    compressedProxySpec: {{ .Values.gateway.compressedProxySpec}}
{{- end}}
{{- if .Values.gateway.validation.enabled }}
    validation:
      proxyValidationServerAddr: "gloo:{{ .Values.gloo.deployment.validationPort }}"
{{- /* need to do this weird if/else because Helm cannot differentiate between 'false' and 'unset' */}}
      alwaysAccept: {{ .Values.gateway.validation.alwaysAcceptResources }}
      allowWarnings: {{ .Values.gateway.validation.allowWarnings }}
      disableTransformationValidation: {{ .Values.gateway.validation.disableTransformationValidation }}
      warnRouteShortCircuiting: {{ .Values.gateway.validation.warnRouteShortCircuiting }}
{{- end }}

{{- if ne .Values.discovery.fdsMode "" }}
  discovery:
    fdsMode: {{.Values.discovery.fdsMode}}
{{- end }}

{{- if .Values.settings.extensions }}
  extensions:
{{- toYaml .Values.settings.extensions | nindent 4 }}
{{- end }}

{{- if .Values.settings.rateLimit }}
  rateLimit:
{{- toYaml .Values.settings.rateLimit | nindent 4 }}
{{- end }}

{{/* extauth have specified yaml in Enterprise (as opposed to generic yaml insertion for third party configs here) */}}
{{- if .Values.global.extauthCustomYaml }}
{{- if .Values.global.extensions }}
{{- if .Values.global.extensions.extAuth }}
  extauth:
{{- toYaml .Values.global.extensions.extAuth | nindent 4 }}
{{- end }}
{{- end }}
{{- end -}}

{{- if .Values.global.extraSpecs }}
{{- include "gloo.extraSpecs"  . }}
{{- end -}}

{{- if .Values.settings.singleNamespace }}
  watchNamespaces:
  - {{ .Release.Namespace }}
{{- else }}
{{- with .Values.settings.watchNamespaces }}
  watchNamespaces:
  {{- range . }}
  - {{ . }}
  {{- end }}
{{- end }}
{{- end }}

{{- end }} {{/* if .Values.settings.create  */}}
{{- end }} {{/* define "settings.settingsSpec" */}}

{{/* Render template with yaml overrides */}}
{{- $kubeResourceOverride := dict -}}
{{- if .Values.settings -}}
{{- $kubeResourceOverride = .Values.settings.kubeResourceOverride  -}}
{{- end -}}
{{- include "gloo.util.merge" (list . $kubeResourceOverride "settings.settingsSpec") -}}

