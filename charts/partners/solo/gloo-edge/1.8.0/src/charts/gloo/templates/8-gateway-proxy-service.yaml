{{- define "gatewayProxy.serviceSpec" }}
{{- $name := (index . 1) }}
{{- $spec := (index . 2) }}
{{- with (first .) }}
{{ $gatewaySettings := $spec.gatewaySettings }}
{{- $svcName := default $name $spec.service.name }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: {{ $name | kebabcase }}
  name: {{ $svcName | kebabcase }}
  namespace: {{ .Release.Namespace }}
{{- if $spec.service.extraAnnotations }}
  annotations:
  {{- range $key, $value := $spec.service.extraAnnotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
{{- end }}
spec:
{{- if $spec.service.externalIPs }}
{{- with $spec.service.externalIPs }}
  externalIPs:
    {{- range . }}
    - {{ . }}
    {{- end }}
{{- end }} {{- /* with spec.service.externalIPs */}}
{{- end }} {{- /* $spec.service.externalIPs */}}
{{- if $spec.service.externalTrafficPolicy }}
  externalTrafficPolicy: {{ $spec.service.externalTrafficPolicy }}
{{- end }}
  # port order matters due to this issue: https://github.com/solo-io/gloo/issues/2571
  ports:
{{- if $spec.service.httpsFirst }}
  {{- if not $gatewaySettings.disableHttpsGateway }}
  - port: {{ $spec.service.httpsPort }}
    targetPort: {{ $spec.podTemplate.httpsPort }}
    protocol: TCP
    name: https
    {{- if and (eq $spec.service.type "NodePort") $spec.service.httpsNodePort }}
    nodePort: {{ $spec.service.httpsNodePort }}
    {{- end}}
  {{- end }}
{{- end }}
  {{- if not $gatewaySettings.disableHttpGateway }}
  - port: {{ $spec.service.httpPort }}
    targetPort: {{ $spec.podTemplate.httpPort }}
    protocol: TCP
    name: http
    {{- if and (eq $spec.service.type "NodePort") $spec.service.httpNodePort }}
    nodePort: {{ $spec.service.httpNodePort }}
    {{- end}}
  {{- end }}
{{- if not $spec.service.httpsFirst }}
  {{- if not $gatewaySettings.disableHttpsGateway }}
  - port: {{ $spec.service.httpsPort }}
    targetPort: {{ $spec.podTemplate.httpsPort }}
    protocol: TCP
    name: https
    {{- if and (eq $spec.service.type "NodePort") $spec.service.httpsNodePort }}
    nodePort: {{ $spec.service.httpsNodePort }}
    {{- end}}
  {{- end }}
{{- end }}
{{- if $spec.failover }}
{{- if $spec.failover.enabled }}
  - port: {{ $spec.failover.port }}
    targetPort: {{ $spec.failover.port }}
    protocol: TCP
    name: failover
    nodePort: {{ $spec.failover.nodePort }}
{{- end }} {{- /* if failover.enabled */}}
{{- end }} {{- /* if failover */}}
{{- if $spec.service.customPorts }}
{{ toYaml $spec.service.customPorts | indent 2 }}
{{- end}}
  selector:
    gateway-proxy-id: {{ $name | kebabcase }}
    gateway-proxy: live
  type: {{ $spec.service.type }}
  {{- if and (eq $spec.service.type "ClusterIP") $spec.service.clusterIP }}
  clusterIP: {{ $spec.service.clusterIP }}
  {{- end }}
  {{- if eq $spec.service.type "LoadBalancer" }}
  {{- if $spec.service.loadBalancerIP }}
  loadBalancerIP: {{ $spec.service.loadBalancerIP }}
  {{- end }} {{/* $spec.service.loadBalancerIP */}}
  {{- if $spec.service.loadBalancerSourceRanges }}
  {{- with $spec.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- range . }}
    - {{ . }}
    {{- end }}
  {{- end }} {{/* with spec.service.loadBalancerSourceRanges */}}
  {{- end }} {{/* $spec.service.loadBalancerSourceRanges */}}
  {{- end }} {{/* $spec.service.type "LoadBalancer" */}}
  {{- end }} {{/* with */}}
  {{- end }} {{/* define gatewayProxy.serviceSpec */}}
{{- define "gatewayProxy.configDumpServiceSpec" }}
{{- $name := (index . 1) }}
{{- with (first .) }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $name | kebabcase }}-config-dump-service
  namespace: {{ .Release.Namespace }}
  labels:
    gloo: gateway-proxy
    gateway-proxy-id: {{ $name | kebabcase }}
spec:
  type: ClusterIP
  selector:
    gloo: gateway-proxy
    gateway-proxy-id: {{ $name | kebabcase }}
  ports:
    - protocol: TCP
      port: 8082
{{- end }} {{/* with (first .) */}}
{{- end }} {{/* define gatewayProxy.configDumpServiceSpec */}}

{{- if .Values.gateway.enabled }}
{{- $gatewayProxy := .Values.gatewayProxies.gatewayProxy -}}
{{- range $name, $gatewaySpec := .Values.gatewayProxies }}
{{- $spec := deepCopy $gatewaySpec | mergeOverwrite (deepCopy $gatewayProxy) -}}
{{/* Render each gatewayProxy template with it's yaml overrides */}}
{{- $serviceYamlOverride := dict -}}
{{- $configDumpServiceYamlOverride := dict -}}
{{- if $gatewaySpec.service -}}
{{- $serviceYamlOverride = $spec.service.kubeResourceOverride  -}}
{{- if $gatewaySpec.service.configDumpService -}}
{{- $configDumpServiceYamlOverride = $spec.service.configDumpService.kubeResourceOverride  -}}
{{- end -}}{{/* if $gatewaySpec.service.configDumpService */}}
{{- end -}}{{/* if $gatewaySpec.service */}}
{{- $ctx := (list $ $name $spec)}}
{{- if not $spec.disabled }}
---
{{- include "gloo.util.merge" (list $ctx $serviceYamlOverride "gatewayProxy.serviceSpec") -}}
{{- if and $spec.readConfig $spec.readConfigMulticluster }}
---
{{- include "gloo.util.merge" (list $ctx $configDumpServiceYamlOverride "gatewayProxy.configDumpServiceSpec") -}}
{{- end }} {{/* if and ($spec.readConfig $spec.readConfigMulticluster) */}}
{{- end }}{{/* if not $spec.disabled */}}
{{- end }} {{/* range $name, $spec := .Values.gatewayProxies */}}
{{- end }} {{/* if .Values.gateway.enabled */}}

