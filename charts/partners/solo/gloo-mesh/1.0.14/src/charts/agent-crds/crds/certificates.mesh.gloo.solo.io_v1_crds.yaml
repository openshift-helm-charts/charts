# Code generated by skv2. DO NOT EDIT.

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app: gloo-mesh
    app.kubernetes.io/name: gloo-mesh
  name: issuedcertificates.certificates.mesh.gloo.solo.io
spec:
  group: certificates.mesh.gloo.solo.io
  names:
    kind: IssuedCertificate
    listKind: IssuedCertificateList
    plural: issuedcertificates
    singular: issuedcertificate
  preserveUnknownFields: false
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: |-
            IssuedCertificates are used to issue SSL certificates
               to remote Kubernetes clusters from a central (out-of-cluster) Certificate Authority.

               When an IssuedCertificate is created, a certificate is issued to a remote cluster by a central Certificate Authority via
               the following workflow:

               1. The Certificate Issuer creates the IssuedCertificate resource on the remote cluster
               2. The Certificate Signature Requesting Agent installed to the remote cluster generates
                 a Certificate Signing Request and writes it to the status of the IssuedCertificate
               3. Finally, the Certificate Issuer generates signed a certificate for the CSR and writes
                 it back as Kubernetes Secret in the remote cluster.

               Trust can therefore be established across clusters without requiring
               private keys to ever leave the node.
          properties:
            hosts:
              description: |-
                A list of hostnames and IPs to generate a certificate for.
                        This can also be set to the identity running the workload,
                        e.g. a Kubernetes service account.

                        Generally for an Istio CA this will take the form `spiffe://cluster.local/ns/istio-system/sa/citadel`.

                        "cluster.local" may be replaced by the root of trust domain for the mesh.
              items:
                type: string
              type: array
            issuedCertificateSecret:
              description: The secret containing the SSL certificate to be generated
                for this IssuedCertificate (located in the Gloo Mesh agent's cluster).
              properties:
                name:
                  description: name of the resource being referenced
                  type: string
                namespace:
                  description: namespace of the resource being referenced
                  type: string
              type: object
            org:
              description: The organization for this certificate.
              type: string
            podBounceDirective:
              description: |-
                A reference to a PodBounceDirective specifying a list of Kubernetes pods to bounce
                (delete and cause a restart) when the certificate is issued.

                Istio-controlled pods require restarting in order for Envoy proxies to pick up the newly issued certificate
                due to [this issue](https://github.com/istio/istio/issues/22993).

                This will include the control plane pods as well as any Pods
                which share a data plane with the target mesh.
              properties:
                name:
                  description: name of the resource being referenced
                  type: string
                namespace:
                  description: namespace of the resource being referenced
                  type: string
              type: object
            signingCertificateSecret:
              description: The secret containing the root SSL certificate used to
                sign this IssuedCertificate (located in the certificate issuer's cluster).
              properties:
                name:
                  description: name of the resource being referenced
                  type: string
                namespace:
                  description: namespace of the resource being referenced
                  type: string
              type: object
          type: object
        status:
          description: The IssuedCertificate status is written by the CertificateRequesting
            agent.
          properties:
            error:
              description: |-
                Any error observed which prevented the CertificateRequest from being processed.
                If the error is empty, the request has been processed successfully.
              type: string
            observedGeneration:
              description: |-
                The most recent generation observed in the the IssuedCertificate metadata.
                If the `observedGeneration` does not match `metadata.generation`, the Gloo Mesh agent has not processed the most
                recent version of this IssuedCertificate.
              format: int64
              type: integer
            state:
              description: The current state of the IssuedCertificate workflow, reported
                by the agent.
              enum:
              - PENDING
              - REQUESTED
              - ISSUED
              - FINISHED
              - FAILED
              type: string
          type: object
      type: object
  versions:
  - name: v1
    served: true
    storage: true

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app: gloo-mesh
    app.kubernetes.io/name: gloo-mesh
  name: certificaterequests.certificates.mesh.gloo.solo.io
spec:
  group: certificates.mesh.gloo.solo.io
  names:
    kind: CertificateRequest
    listKind: CertificateRequestList
    plural: certificaterequests
    singular: certificaterequest
  preserveUnknownFields: false
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: |-
            CertificateRequests are generated by the Gloo Mesh agent installed on managed clusters.
               They are used to request a signed certificate from the certificate issuer (the Gloo Mesh server) based on a private key
               generated by the agent (which never leaves the managed cluster).

               When Gloo Mesh creates an IssuedCertificate on a managed cluster, the local Gloo Mesh Agent
               will generate a CertificateRequest corresponding to it.

               Gloo Mesh will then process the certificate signing request contained in the
               `CertificateRequestSpec` and write the signed SSL certificate back as a Kubernetes secret in the managed cluster,
               and update the `CertificateRequestStatus` to point to that secret.
          properties:
            certificateSigningRequest:
              description: |-
                Base64-encoded data for the PKCS#10 Certificate Signing Request issued
                by the Gloo Mesh agent deployed in the managed cluster, corresponding
                to the IssuedRequest received by the Gloo Mesh agent.
              format: binary
              type: string
          type: object
        status:
          properties:
            error:
              description: |-
                Any error observed which prevented the CertificateRequest from being processed.
                If the error is empty, the request has been processed successfully
              type: string
            observedGeneration:
              description: |-
                The most recent generation observed in the the CertificateRequest metadata.
                If the `observedGeneration` does not match `metadata.generation`, the issuer has not processed the most
                recent version of this request.
              format: int64
              type: integer
            signedCertificate:
              description: The signed intermediate certificate issued by the CA.
              format: binary
              type: string
            signingRootCa:
              description: The root CA used by the issuer to sign the certificate.
              format: binary
              type: string
            state:
              description: The current state of the CertificateRequest workflow reported
                by the issuer.
              enum:
              - PENDING
              - FINISHED
              - FAILED
              type: string
          type: object
      type: object
  versions:
  - name: v1
    served: true
    storage: true

---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app: gloo-mesh
    app.kubernetes.io/name: gloo-mesh
  name: podbouncedirectives.certificates.mesh.gloo.solo.io
spec:
  group: certificates.mesh.gloo.solo.io
  names:
    kind: PodBounceDirective
    listKind: PodBounceDirectiveList
    plural: podbouncedirectives
    singular: podbouncedirective
  preserveUnknownFields: false
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        spec:
          description: |-
            When certificates are issued, Istio-controlled pods need to be bounced (restarted) to ensure they pick up the
               new certificates due to [this issue](https://github.com/istio/istio/issues/22993).
               The certificate issuer will create a PodBounceDirective containing the namespaces and labels
               of the pods that need to be bounced in order to pick up the new certs.
          properties:
            podsToBounce:
              description: |-
                A list of Kubernetes pods to bounce (delete and cause a restart)
                when the certificate is issued.
                This will include the control plane pods as well as any Pods
                which share a data plane with the target mesh.
              items:
                properties:
                  labels:
                    additionalProperties:
                      type: string
                    description: Any labels shared by the Pods.
                    type: object
                  namespace:
                    description: The namespace in which the pods live.
                    type: string
                  rootCertSync:
                    description: |-
                      Wait for the control plane to have synced all root cert configmaps in data plane namespaces before
                      bouncing these Pods.
                    properties:
                      configMapKey:
                        type: string
                      configMapRef:
                        properties:
                          name:
                            description: name of the resource being referenced
                            type: string
                          namespace:
                            description: namespace of the resource being referenced
                            type: string
                        type: object
                      secretKey:
                        type: string
                      secretRef:
                        properties:
                          name:
                            description: name of the resource being referenced
                            type: string
                          namespace:
                            description: namespace of the resource being referenced
                            type: string
                        type: object
                    type: object
                  waitForReplicas:
                    description: |-
                      Wait for this number of replacement pods to reach be fully ready before
                      deleting the next set of selected Pods.
                      This is used to ensure the control plane pods are allowed to restart
                      before sidecars and gateways are restarted.
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                type: object
              type: array
          type: object
        status:
          description: PodBounceDirectiveStatus reports the status for stateful Pod
            bounces (when bouncing pods requires waiting for readiness).
          properties:
            podsBounced:
              description: |-
                A list of Kubernetes pods to bounce (delete and cause a restart)
                when the certificate is issued.
                This will include the control plane pods as well as any Pods
                which share a data plane with the target mesh.
              items:
                properties:
                  bouncedPods:
                    description: The names of the pods that were bounced for the corresponding
                      selector specified in `PodBounceDirectiveSpec.PodSelector.labels`.
                    items:
                      type: string
                    type: array
                type: object
              type: array
          type: object
      type: object
  versions:
  - name: v1
    served: true
    storage: true
