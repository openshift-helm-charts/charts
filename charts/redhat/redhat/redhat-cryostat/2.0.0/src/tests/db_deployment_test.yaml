suite: test db_deployment.yaml
templates:
  - db_deployment.yaml

tests:
  - it: should verify general deployment settings
    asserts:
      - equal:
          path: kind
          value: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-cryostat-v4-db
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.strategy.type
          value: Recreate
      - equal:
          path: spec.selector.matchLabels
          value:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/name: cryostat
            app.kubernetes.io/component: db
            app.kubernetes.io/part-of: cryostat
      - equal:
          path: spec.template.metadata.labels
          value:
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/name: cryostat
            app.kubernetes.io/component: db
            app.kubernetes.io/part-of: cryostat
      - notExists:
          path: spec.template.spec.serviceAccountName
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.securityContext.seccompProfile.type
          value: RuntimeDefault
      - equal:
          path: metadata.labels
          value:
            helm.sh/chart: cryostat-2.0.0
            app.kubernetes.io/name: cryostat
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/version: "4.0.0"
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: db
            app.kubernetes.io/part-of: cryostat

  - it: should validate cryostat-db settings
    asserts:
      - exists:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')]
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].securityContext.capabilities.drop
          value:
            - ALL
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].image
          value: "quay.io/cryostat/cryostat-db:4.0.0"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].imagePullPolicy
          value: "IfNotPresent"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].env[?(@.name=='POSTGRESQL_USER')].value
          value: "cryostat"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].env[?(@.name=='POSTGRESQL_PASSWORD')].valueFrom.secretKeyRef
          value:
              name: "RELEASE-NAME-db"
              key: "CONNECTION_KEY"
              optional: false
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].env[?(@.name=='POSTGRESQL_DATABASE')].value
          value: "cryostat"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].env[?(@.name=='PG_ENCRYPT_KEY')].valueFrom.secretKeyRef
          value:
              name: "RELEASE-NAME-db"
              key: "ENCRYPTION_KEY"
              optional: false
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].ports[0].containerPort
          value: 5432
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].ports[0].protocol
          value: "TCP"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].volumeMounts[0].mountPath
          value: "/var/lib/pgsql/data"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].volumeMounts[0].name
          value: "cryostat-db"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].volumeMounts[0].subPath
          value: "postgres"
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].readinessProbe.exec.command
          value:
              - pg_isready
              - -U
              - cryostat
              - -d
              - cryostat
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].resources
          value:
            requests:
              cpu: 25m
              memory: 64Mi

  - it: should set resource overrides
    set:
      db:
        resources:
          limits:
            cpu: 2000m
            memory: 1Gi
          requests:
            cpu: 4000m
            memory: 2Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].resources
          value:
            limits:
              cpu: 2000m
              memory: 1Gi
            requests:
              cpu: 4000m
              memory: 2Gi

  - it: should set PersistentVolumeClaim (pvc) reference
    set:
      db:
        pvc:
          enabled: true
    asserts:
      - exists:
          path: spec.template.spec.volumes[?(@.name=='cryostat-db')]
      - equal:
          path: spec.template.spec.volumes[?(@.name=='cryostat-db')]
          value:
            name: cryostat-db
            persistentVolumeClaim:
              claimName: RELEASE-NAME-db

  - it: should validate volumes and volume mounts
    asserts:
      - exists:
          path: spec.template.spec.volumes[?(@.name=='cryostat-db')]
      - equal:
          path: spec.template.spec.volumes[?(@.name=='cryostat-db')]
          value:
            name: cryostat-db
            emptyDir: {}
      - exists:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].volumeMounts[?(@.mountPath=='/var/lib/pgsql/data')]

  - it: should set image pull secrets if specified
    set:
      imagePullSecrets:
        - name: myregistrykey
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: "myregistrykey"

  - it: should apply Kubernetes specific settings when configured
    set:
      nodeSelector:
        disktype: ssd
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
      tolerations:
      - key: "key"
        operator: "Equal"
        value: "value"
        effect: "NoSchedule"
    asserts:
      - exists:
          path: spec.template.spec.nodeSelector
      - exists:
          path: spec.template.spec.affinity
      - exists:
          path: spec.template.spec.tolerations

  - it: should accept specific nodeSelector setting
    set:
      db.nodeSelector:
        diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            diskType: ssd

  - it: should prefer specific nodeSelector over general
    set:
      nodeSelector:
        disktype: hdd
      db.nodeSelector:
        diskType: ssd
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            diskType: ssd

  - it: should accept specific tolerations setting
    set:
      db.tolerations:
        - key: "key1"
          operator: "Equal"
          value: "value1"
          effect: "NoSchedule"
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - key: "key1"
              operator: "Equal"
              value: "value1"
              effect: "NoSchedule"

  - it: should prefer specific tolerations over general
    set:
      tolerations:
        - key: "key1"
          operator: "Equal"
          value: "value1"
          effect: "NoSchedule"
      db.tolerations:
        - key: "key2"
          operator: "Equal"
          value: "value2"
          effect: "NoSchedule"
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - key: "key2"
              operator: "Equal"
              value: "value2"
              effect: "NoSchedule"

  - it: should accept specific affinity setting
    set:
      db.affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: disktype
                    operator: In
                    values:
                    - ssd

  - it: should prefer specific affinity over general
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
      db.affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: disktype
                operator: In
                values:
                - ssd
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: disktype
                    operator: In
                    values:
                    - ssd

  - it: should verify image pull policies for development snapshots
    set:
      core.image.tag: "4.0.0-snapshot"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].imagePullPolicy
          value: "IfNotPresent"

  - it: should verify image pull policies for release versions
    set:
      db.image.pullPolicy: "IfNotPresent"
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name=='cryostat-db')].imagePullPolicy
          value: "IfNotPresent"

  - it: should set default podAnnotations
    set:
      podAnnotations:
        foo: bar
    asserts:
      - equal:
          path: spec.template.metadata.annotations
          value:
            foo: bar

  - it: should set pod-specific podAnnotations
    set:
      db.podAnnotations:
        foo: bar
    asserts:
      - equal:
          path: spec.template.metadata.annotations
          value:
            foo: bar

  - it: should set merge pod-specific and default podAnnotations
    set:
      db.podAnnotations:
        foo: bar
      podAnnotations:
        alice: bob
    asserts:
      - equal:
          path: spec.template.metadata.annotations
          value:
            alice: bob
            foo: bar
